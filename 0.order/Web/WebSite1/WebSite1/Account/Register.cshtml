@* 묶음을 사용하고 있는 경우 이 섹션을 제거합니다. *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "등록";

    // 일반 페이지 변수를 초기화합니다.
    var email = "";
    var password = "";
    var confirmPassword = "";

    // 유효성 검사를 설정합니다.
    Validation.RequireField("email", "전자 메일 주소를 지정해야 합니다.");
    Validation.RequireField("password", "암호는 비워 둘 수 없습니다.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "암호와 암호 확인이 일치하지 않습니다."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "암호는 6자 이상이어야 합니다."));

    // 이 요청이 POST 요청인 경우 데이터의 유효성을 검사한 후 처리합니다.
    if (IsPost) {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];

        // 사용자 captcha 응답의 유효성을 확인합니다.
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha 응답이 잘못되었습니다.");
        // }

        // 모든 정보가 올바른 경우 새 계정을 만듭니다.
        if (Validation.IsValid()) {
            // 새 사용자를 데이터베이스에 삽입합니다.
            var db = Database.Open("StarterSite");

            // 사용자가 이미 존재하는지 확인합니다.
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // 전자 메일을 프로필 테이블에 삽입합니다.
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // 멤버 자격 데이터베이스에서 새 항목을 만들어 연결합니다.
                // 성공한 경우 계속해서 요청을 처리합니다.
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "계정을 확인하십시오.",
                            body: "확인 코드는 다음과 같습니다.: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a>을(를) 방문하여 계정을 활성화하십시오."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // 사용자에게 등록에 대한 감사를 표시하고 곧 전자 메일을 받게 될 것임을 알립니다.
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // 홈페이지로 돌아가서 종료합니다.
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // 사용자가 이미 존재합니다.
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>새 계정을 만듭니다.</h2>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    @* 하나 이상의 유효성 검사 오류가 있는 경우 사용자에게 알립니다. *@
    @Html.ValidationSummary("계정을 만들지 못했습니다. 오류를 수정한 후 다시 시도하십시오.", excludeFieldErrors: true, htmlAttributes: null)

    <fieldset>
        <legend>등록 양식</legend>
        <ol>
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>전자 메일 주소</label>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                @* 페이지에 모든 전자 메일 유효성 검사 오류를 씁니다. *@
                @Html.ValidationMessage("email")
            </li>
            <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>암호</label>
                <input type="password" id="password" name="password" @Validation.For("password") />
                @* 페이지에 모든 암호 유효성 검사 오류를 씁니다. *@
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>암호 확인</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                @* 페이지에 모든 암호 유효성 검사 오류를 씁니다. *@
                @Html.ValidationMessage("confirmPassword")
            </li>
            <li class="recaptcha">
                <div class="message-info">
                    <p>
                        CAPTCHA 확인을 사용하도록 설정하려면, <a href="http://go.microsoft.com/fwlink/?LinkId=204140">ASP.NET Web Helpers Library를 설치</a>하고 
                        ReCaptcha.GetHtml에 대한 주석 처리를 제거한 다음 공개 키로 'PUBLIC_KEY'
                        를 바꿉니다. 이 페이지의 맨 위에서 ReCaptcha. Validate에 대한 주석 처리를 제거한 다음
                        개인 키로 'PRIVATE_KEY' 를 바꿉니다.
                        다음 위치에서 reCAPTCHA 키를 등록합니다. <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                    </p>
                </div>
                @*
                @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                @Html.ValidationMessage("recaptcha")
                *@
            </li>
        </ol>
        <input type="submit" value="등록" />
    </fieldset>
</form>